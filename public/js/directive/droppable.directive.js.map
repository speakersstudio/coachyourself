{"version":3,"sources":["../../app/src/directive/droppable.directive.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sCAMuB;AAKvB;IAGI,4BAAoB,WAAuB;QAAvB,gBAAW,GAAX,WAAW,CAAY;QAFjC,YAAO,GAAyB,IAAI,mBAAY,EAAE,CAAC;IAEf,CAAC;IAE/C,qCAAQ,GAAR;QAAA,iBA8BC;QA7BG,IAAI,EAAE,GAAe,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC;QAEpD,EAAE,CAAC,gBAAgB,CAAC,WAAW,EAAE,UAAC,CAAC;YAC/B,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gBAAgB,CAAC,WAAW,EAAE,UAAC,CAAC;YAC/B,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gBAAgB,CAAC,UAAU,EAAE,UAAC,CAAC;YAC9B,EAAE,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;gBACnB,CAAC,CAAC,cAAc,EAAE,CAAC;YACvB,CAAC;YAED,CAAC,CAAC,YAAY,CAAC,UAAU,GAAG,MAAM,CAAC;YACnC,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gBAAgB,CAAC,MAAM,EAAE,UAAC,CAAC;YAC1B,EAAE,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;gBACpB,CAAC,CAAC,eAAe,EAAE,CAAC;YACxB,CAAC;YAED,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YAC5B,IAAI,IAAI,GAAG,CAAC,CAAC,YAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YAC1C,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACxB,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC,CAAC,CAAA;IACN,CAAC;IAlCS;QAAT,aAAM,EAAE;kCAAU,mBAAY;uDAA8B;IADpD,kBAAkB;QAH9B,gBAAS,CAAC;YACP,QAAQ,EAAE,iBAAiB;SAC9B,CAAC;yCAImC,iBAAU;OAHlC,kBAAkB,CAoC9B;IAAD,yBAAC;CApCD,AAoCC,IAAA;AApCY,gDAAkB","file":"droppable.directive.js","sourcesContent":["import {\r\n    Directive,\r\n    ElementRef,\r\n    OnInit,\r\n    Output,\r\n    EventEmitter\r\n} from '@angular/core';\r\n\r\n@Directive({\r\n    selector: '[makeDroppable]'\r\n})\r\nexport class DroppableDirective implements OnInit {\r\n    @Output() dropped: EventEmitter<string> = new EventEmitter();\r\n\r\n    constructor(private _elementRef: ElementRef) {}\r\n\r\n    ngOnInit() {\r\n        let el:HTMLElement = this._elementRef.nativeElement;\r\n\r\n        el.addEventListener('dragenter', (e) => {\r\n            el.classList.add('over');\r\n        });\r\n\r\n        el.addEventListener('dragleave', (e) => {\r\n            el.classList.remove('over');\r\n        });\r\n\r\n        el.addEventListener('dragover', (e) => {\r\n            if (e.preventDefault) {\r\n                e.preventDefault();\r\n            }\r\n\r\n            e.dataTransfer.dropEffect = 'move';\r\n            return false;\r\n        });\r\n\r\n        el.addEventListener('drop', (e) => {\r\n            if (e.stopPropagation) {\r\n                e.stopPropagation();\r\n            }\r\n\r\n            el.classList.remove('over');\r\n            let data = e.dataTransfer.getData('text');\r\n            this.dropped.emit(data);\r\n            return false;\r\n        })\r\n    }\r\n}"]}