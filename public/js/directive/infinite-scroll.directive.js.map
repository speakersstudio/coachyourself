{"version":3,"sources":["../../app/src/directive/infinite-scroll.directive.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sCASuB;AAGvB,8CAA6C;AAE7C,4DAA0D;AAK1D,IAAa,uBAAuB;IAgBhC,iCACY,WAAuB,EACvB,IAAkB;QADlB,gBAAW,GAAX,WAAW,CAAY;QACvB,SAAI,GAAJ,IAAI,CAAc;QAhBpB,SAAI,GAAG,IAAI,mBAAY,EAAU,CAAC,CAAC,kDAAkD;QAE7E,cAAS,GAAY,KAAK,CAAC;QAM7C,kBAAa,GAAW,EAAE,CAAC;QAI3B,cAAS,GAAW,CAAC,CAAC;QAMlB,IAAI,CAAC,OAAO,GAAG,WAAW,CAAC,aAAa,CAAC;IAC7C,CAAC;IAED,0CAAQ,GAAR;QACI,mEAAmE;QACnE,6CAA6C;QAC7C,qCAAqC;QACrC,+CAA+C;QAJnD,iBAiBC;QAXG,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS;aACxC,QAAQ,CAAC,cAAM,OAAA,uBAAU,CAAC,KAAK,CAAC,EAAE,CAAC,EAApB,CAAoB,CAAC;aACpC,MAAM,CAAC,cAAM,OAAA,CAAC,KAAI,CAAC,SAAS,IAAI,CAAC,KAAI,CAAC,OAAO,EAAhC,CAAgC,CAAC;aAC9C,SAAS,CAAC,UAAA,GAAG,IAAI,OAAA,KAAI,CAAC,cAAc,CAAC,GAAG,CAAC,EAAxB,CAAwB,CAAC,CAAC;QAEhD,UAAU,CAAC;YACP,IAAI,IAAI,GAAG,KAAI,CAAC,OAAO,CAAC,qBAAqB,EAAE,CAAC,CAAC,WAAW;YAC5D,KAAI,CAAC,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC;YAE1B,KAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;QAC3B,CAAC,EAAE,GAAG,CAAC,CAAC;IACZ,CAAC;IAED,6CAAW,GAAX;QACI,IAAI,CAAC,kBAAkB,CAAC,WAAW,EAAE,CAAC;IAC1C,CAAC;IAED,6CAAW,GAAX,UAAY,OAAY;QACpB,8DAA8D;QAC9D,6BAA6B;QAC7B,IAAI;IACR,CAAC;IAED,gDAAc,GAAd,UAAe,GAAY;QACvB,GAAG,GAAG,GAAG,IAAI,QAAQ,CAAC,gBAAgB,CAAC,SAAS,CAAC;QAEjD,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC;QACxC,IAAI,YAAY,GAAG,CAAC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,WAAW,GAAG,GAAG,CAAC,CAAC;QAE/E,EAAE,CAAC,CAAC,GAAG,GAAG,MAAM,CAAC,WAAW,IAAI,YAAY,CAAC,CAAC,CAAC;YAC3C,IAAI,CAAC,SAAS,EAAE,CAAC;YACjB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACnC,CAAC;IACL,CAAC;IACL,8BAAC;AAAD,CA/DA,AA+DC,IAAA;AA7Da;IAAT,aAAM,EAAE;;qDAAmC;AAE1B;IAAjB,YAAK,CAAC,SAAS,CAAC;;0DAA4B;AAJpC,uBAAuB;IAHnC,gBAAS,CAAC;QACP,QAAQ,EAAE,kBAAkB;KAC/B,CAAC;qCAkB2B,iBAAU;QACjB,4BAAY;GAlBrB,uBAAuB,CA+DnC;AA/DY,0DAAuB","file":"infinite-scroll.directive.js","sourcesContent":["import {\r\n    Directive,\r\n    ElementRef,\r\n    OnInit,\r\n    OnDestroy,\r\n    OnChanges,\r\n    Input,\r\n    Output,\r\n    EventEmitter\r\n} from '@angular/core';\r\n\r\nimport { Subscription } from 'rxjs/Subscription';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\nimport { AppComponent } from '../component/app.component';\r\n\r\n@Directive({\r\n    selector: '[infiniteScroll]'\r\n})\r\nexport class InfiniteScrollDirective implements OnInit, OnDestroy, OnChanges {\r\n\r\n    @Output() load = new EventEmitter<number>(); // emits an event with the current scroll position\r\n\r\n    @Input('disable') _disabled: boolean = false;\r\n    private _ignore: boolean;\r\n\r\n    element: HTMLElement;\r\n    scrollSubscription: Subscription;\r\n\r\n    toolbarHeight: number = 48;\r\n    offsetTop: number;\r\n    height: number;\r\n\r\n    loadCount: number = 0;\r\n\r\n    constructor(\r\n        private _elementRef: ElementRef,\r\n        private _app: AppComponent\r\n    ) {\r\n        this.element = _elementRef.nativeElement;\r\n    }\r\n\r\n    ngOnInit() {\r\n        // this.scrollSubscription = Observable.fromEvent(window, 'scroll')\r\n        //     .throttle(() => Observable.timer(300))\r\n        //     .filter(() => !this._disabled)\r\n        //     .subscribe(() => this.handleOnScroll());\r\n\r\n        this.scrollSubscription = this._app.onScroll$\r\n            .debounce(() => Observable.timer(50))\r\n            .filter(() => !this._disabled && !this._ignore)\r\n            .subscribe(pos => this.handleOnScroll(pos));\r\n\r\n        setTimeout(() => {\r\n            let rect = this.element.getBoundingClientRect(); // lol rekt\r\n            this.offsetTop = rect.top;\r\n\r\n            this.handleOnScroll(0);\r\n        }, 100);\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.scrollSubscription.unsubscribe();\r\n    }\r\n\r\n    ngOnChanges(changes: any) {\r\n        // if (changes._disabled && !changes._disabled.currentValue) {\r\n        //     this.handleOnScroll();\r\n        // }\r\n    }\r\n\r\n    handleOnScroll(pos?: number): void {\r\n        pos = pos || document.scrollingElement.scrollTop;\r\n\r\n        this.height = this.element.offsetHeight;\r\n        let triggerPoint = (this.offsetTop + this.height) - (window.innerHeight * 0.5);\r\n        \r\n        if (pos + window.innerHeight >= triggerPoint) {\r\n            this.loadCount++;\r\n            this.load.emit(this.loadCount);\r\n        }\r\n    }\r\n}"]}