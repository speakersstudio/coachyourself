{"version":3,"sources":["../../app/src/app/component/glossary.component.ts"],"names":[],"mappings":"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","file":"glossary.component.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport {AppComponent    } from '../../component/app.component';\r\nimport { Tool, SearchResult } from '../view/toolbar.view';\r\n\r\nimport { Tag } from '../../model/tag';\r\n\r\nimport { GameDatabaseService } from '../service/game-database.service';\r\nimport { UserService } from '../../service/user.service';\r\n\r\nimport { Util } from '../../util/util';\r\n\r\n@Component({\r\n    moduleId: module.id,\r\n    selector: \"glossary\",\r\n    templateUrl: \"../template/glossary.component.html\"\r\n})\r\nexport class GlossaryComponent implements OnInit {\r\n\r\n    title: string = '<span class=\"light\">glossary</span>';\r\n\r\n    tags: Tag[];\r\n\r\n    toggleGamelessTags: boolean = false;\r\n    toggleAllTags: boolean = false;\r\n\r\n    private _tagDisplayCount: number = 0;\r\n    allTagsAreDisplayed: boolean;\r\n\r\n    isLoadingTags: boolean;\r\n\r\n    selectedTag: Tag;\r\n    tagName: string;\r\n    tagDescription: string;\r\n\r\n    superAdmin: boolean;\r\n\r\n    filter: string;\r\n\r\n    constructor(\r\n        public _app: AppComponent,\r\n        private router: Router,\r\n        private gameService: GameDatabaseService,\r\n        public userService: UserService\r\n    ) { }\r\n\r\n    _tools: Tool[] = [\r\n    ]\r\n\r\n    ngOnInit(): void {\r\n        this.superAdmin = this.userService.isSuperAdmin();\r\n    }\r\n\r\n    allTagsToggle(): void {\r\n        setTimeout(() => {\r\n            this.getTags();\r\n        }, 100);\r\n    }\r\n\r\n    getTags(): void {\r\n        this.selectedTag = null;\r\n        this.isLoadingTags = true;\r\n\r\n        this.gameService.getTags().then(tags => {\r\n            let filteredtags = tags.filter(tag => {\r\n                    if (this.toggleGamelessTags) {\r\n                        return tag.games.length == 0;\r\n                    } else {\r\n                        let pass = this.toggleAllTags || !!tag.description;\r\n                        if (this.filter) {\r\n                            pass = pass &&\r\n                                (tag.name.toLowerCase().indexOf(this.filter.toLowerCase()) > -1 ||\r\n                                    tag.description.toLowerCase().indexOf(this.filter.toLowerCase()) > -1)\r\n                        }\r\n                        return pass;\r\n                    }\r\n                }).sort((a, b) => {\r\n                    return a.name.localeCompare(b.name);\r\n                });\r\n            if (filteredtags.length > this._tagDisplayCount) {\r\n                this.tags = filteredtags.slice(0, this._tagDisplayCount);\r\n                this.allTagsAreDisplayed = false;\r\n            } else {\r\n                this.tags = filteredtags;\r\n                this.allTagsAreDisplayed = true;\r\n            }\r\n            this.isLoadingTags = false;\r\n        });\r\n    }\r\n\r\n    loadMoreTags(page: number): void {\r\n        if (!this.allTagsAreDisplayed) {\r\n            this._tagDisplayCount = 30 * page;\r\n            this.getTags();\r\n        }\r\n    }\r\n\r\n    onSelect(tag: Tag): void {\r\n        if (this.selectedTag && this.selectedTag._id == tag._id) {\r\n            return;\r\n        }\r\n        this.selectedTag = tag;\r\n        this.tagName = tag.name;\r\n        this.tagDescription = tag.description;\r\n    }\r\n\r\n    savingTag: Tag;\r\n    saveTag(): void {\r\n        this.savingTag = this.selectedTag;\r\n\r\n        this.savingTag.name = this.tagName;\r\n        this.savingTag.description = this.tagDescription;\r\n\r\n        this.gameService.saveTag(this.savingTag).then(tag => {\r\n            this.savingTag = null;\r\n        });\r\n\r\n        setTimeout(() => {\r\n            this.selectedTag = null;\r\n        }, 10);\r\n    }\r\n\r\n    deleteTag(): void {\r\n        let index = Util.indexOfId(this.tags, this.selectedTag);\r\n        this.gameService.deleteTag(this.selectedTag);\r\n\r\n        setTimeout(() => {\r\n            this.tags.splice(index, 1);\r\n            this.selectedTag = null;\r\n        }, 10);\r\n    }\r\n\r\n    onSearch(result: SearchResult): void {\r\n        if (result.type == 'search') {\r\n            this.filter = result.text;\r\n            this.getTags();\r\n        }\r\n    }\r\n\r\n    clearFilter(): void {\r\n        this.filter = '';\r\n        this.getTags();\r\n    }\r\n\r\n    createTag(): void {\r\n        this.savingTag = new Tag();\r\n        this.tags.unshift(this.savingTag);\r\n\r\n        this.gameService.newTag().then(tag => {\r\n            this.tags.splice(0, 1, tag);\r\n            this.savingTag = null;\r\n        });\r\n    }\r\n\r\n}\r\n"]}