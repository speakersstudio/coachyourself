{"version":3,"sources":["../../app/src/app/service/game-database.service.ts"],"names":[],"mappings":"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","file":"game-database.service.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Response } from '@angular/http';\r\n\r\nimport 'rxjs/add/operator/toPromise';\r\n\r\nimport { AppHttp } from '../../data/app-http';\r\nimport { API } from '../../constants';\r\n\r\nimport { Name } from '../../model/name';\r\nimport { Game } from '../../model/game';\r\nimport { GameMetadata } from '../../model/game-metadata';\r\nimport { Tag } from '../../model/tag';\r\nimport { Note } from '../../model/note';\r\n\r\nimport { SearchResult } from '../../app/view/toolbar.view';\r\n\r\nimport { UserService } from '../../service/user.service';\r\n\r\nimport { Util } from '../../util/util';\r\n\r\n@Injectable()\r\nexport class GameDatabaseService {\r\n\r\n    // cache all the things\r\n    private games: Game[] = [];\r\n    private names: Name[] = [];\r\n    private playercounts: GameMetadata[] = [];\r\n    private durations: GameMetadata[] = [];\r\n    private tags: Tag[] = [];\r\n\r\n    private sortProperty: string;\r\n\r\n    constructor(\r\n        private http: AppHttp,\r\n        private userService: UserService\r\n        ) { }\r\n\r\n    private _gamePromise: Promise<Game[]>;\r\n    getGames(): Promise<Game[]> {\r\n        if (!this._gamePromise) {\r\n            this._gamePromise = this.http.get(API.games)\r\n                .toPromise()\r\n                .then(response => {\r\n                    this.games = response.json() as Game[];\r\n                    this._sortGames();\r\n                    return this.games;\r\n                })\r\n                .catch(this.handleError);\r\n        } \r\n        return this._gamePromise;\r\n    }\r\n\r\n    getGame(id: string): Promise<Game> {\r\n        let gameToReturn: Game;\r\n        if (this.games.length > 0) {\r\n            this.games.forEach((game) => {\r\n                if (game._id === id) {\r\n                    gameToReturn = game;\r\n                }\r\n            })\r\n        }\r\n\r\n        if (gameToReturn) {\r\n            return Promise.resolve(gameToReturn);\r\n        } else {\r\n            // either no games are loaded or we couldn't find the specified one\r\n            return this.http.get(API.getGame(id))\r\n                .toPromise()\r\n                .then(response => {\r\n                    return response.json() as Game;\r\n                })\r\n                .catch(this.handleError);\r\n        }\r\n    }\r\n\r\n    private _sortGames(): Game[] {\r\n        this.games.sort((g1, g2) => {\r\n            if (!g1.names.length) {\r\n                return -1;\r\n            }\r\n            if (!g2.names.length) {\r\n                return 1;\r\n            }\r\n\r\n            return g1.names[0].name.localeCompare(g2.names[0].name);\r\n        });\r\n        return this.games;\r\n    }\r\n\r\n    private _namePromise: Promise<Name[]>;\r\n    getNames(): Promise<Name[]> {\r\n        if (!this._namePromise) {\r\n            this._namePromise = this.http.get(API.names)\r\n                .toPromise()\r\n                .then(response => {\r\n                    this.names = response.json() as Name[];\r\n                    return this.names;\r\n                })\r\n                .catch(this.handleError);\r\n        }\r\n        return this._namePromise;\r\n    }\r\n\r\n    /**\r\n     * A convenience method to search any array of items for any that are linked to a given game id\r\n     * \r\n     * Not currently used anywhere, and it's making Typescript freak out - ain't nobody got time for that\r\n     */\r\n    // private _getItemsByGameID(items: any[], id: number): any[] {\r\n    //     let returnItems: Game[]|Name[] = [];\r\n    //     items.forEach(item => {\r\n    //         if (item.game && item.game == id) {\r\n    //             returnItems.push(item);\r\n    //         } else if (item.games && Util.indexOfId(item.games, id) > -1) {\r\n    //             returnItems.push(item);\r\n    //         }\r\n    //     });\r\n    //     return returnItems;\r\n    // }\r\n\r\n    /**\r\n     * Creates a new name for the given gameID, making a post to /api/name\r\n     */\r\n    createName(gameID: string, name: string): Promise<Name> {\r\n        return this.http.post(API.names, {\r\n            game: gameID,\r\n            name: name\r\n        })\r\n            .toPromise()\r\n            .then(response => {\r\n                let name = response.json() as Name;\r\n                this.names.push(name);\r\n\r\n                this.getGame(name.game).then(g => {\r\n                    g.names.unshift(name);\r\n                    this._sortGames();\r\n                });\r\n                return name;\r\n            })\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    /**\r\n     * Updates a name on the server, making a PUT call to /api/name/:_id\r\n     */\r\n    saveName(name: Name): Promise<Name> {\r\n        return this.http.put(API.getName(name._id), name)\r\n            .toPromise()\r\n            .then(response => {\r\n                let newName = response.json() as Name;\r\n                let index = Util.indexOfId(this.names, name);\r\n                if (index > -1) {\r\n                    this.names.splice(index, 1, newName);\r\n                } else {\r\n                    this.names.push(newName);\r\n                }\r\n                this._sortGames();\r\n                return newName; \r\n            })\r\n    }\r\n\r\n    saveTag(tag: Tag): Promise<Tag> {\r\n        return this.http.put(API.getTag(tag._id), tag).toPromise()\r\n            .then(response => {\r\n                let index = Util.indexOfId(this.tags, tag);\r\n                let t = response.json() as Tag;\r\n                this.tags.splice(index, 1, t);\r\n                return t;\r\n            });\r\n    }\r\n\r\n    newTag(): Promise<Tag> {\r\n        return this.http.post(API.tags, {name: 'New Tag'}).toPromise()\r\n            .then(response => {\r\n                let tag = response.json() as Tag;\r\n                this.tags.push(tag);\r\n                return tag;\r\n            })\r\n    }\r\n\r\n    deleteTag(tag: Tag): Promise<boolean> {\r\n        return this.http.delete(API.getTag(tag._id)).toPromise()\r\n            .then(response => {\r\n                let index = Util.indexOfId(this.tags, tag);\r\n                this.tags.splice(index, 1);\r\n                return true;\r\n            })\r\n    }\r\n\r\n    private _playerCountPromise: Promise<GameMetadata[]>;\r\n    getPlayerCounts(): Promise<GameMetadata[]> {\r\n        if (!this._playerCountPromise) {\r\n            this._playerCountPromise = this.http.get(API.playerCount)\r\n                .toPromise()\r\n                .then(response => {\r\n                    this.playercounts = response.json() as GameMetadata[];\r\n                    this.sortPlayerCounts();\r\n                    return this.playercounts;\r\n                })\r\n                .catch(this.handleError);\r\n        }\r\n        return this._playerCountPromise;\r\n    }\r\n\r\n    private sortPlayerCounts(): void {\r\n        this.playercounts.sort((a, b) => {\r\n            return a.name.localeCompare(b.name);\r\n        });\r\n    }\r\n\r\n    getPlayerCountById(id: String): Promise<GameMetadata> {\r\n        return new Promise<GameMetadata>((resolve, reject) => {\r\n            this.getPlayerCounts().then((playercounts) => {\r\n                playercounts.forEach((playercount) => {\r\n                    if (playercount._id == id) {\r\n                        resolve(playercount);\r\n                    }\r\n                });\r\n            })\r\n        });\r\n    }\r\n\r\n    createPlayerCount(name: string, min: number, max: number, description: string): Promise<GameMetadata> {\r\n        return this.http.post(API.metadata,\r\n            {\r\n                name: name,\r\n                min: min,\r\n                max: max,\r\n                type: 'playerCount',\r\n                description: description\r\n            })\r\n            .toPromise()\r\n            .then((response) => {\r\n                let playercount = response.json() as GameMetadata;\r\n                this.playercounts.push(playercount);\r\n                this.sortPlayerCounts();\r\n                return playercount;\r\n            });\r\n    }\r\n\r\n    private _durationPromise: Promise<GameMetadata[]>;\r\n    getDurations(): Promise<GameMetadata[]> {\r\n        if (!this._durationPromise) {\r\n            this._durationPromise = this.http.get(API.duration)\r\n                .toPromise()\r\n                .then(response => {\r\n                    this.durations = response.json() as GameMetadata[];\r\n                    this.sortDurations();\r\n                    return this.durations;\r\n                })\r\n                .catch(this.handleError);\r\n        }\r\n        return this._durationPromise;\r\n    }\r\n\r\n    private sortDurations(): void {\r\n        this.durations.sort((a, b) => {\r\n            return a.name.localeCompare(b.name);\r\n        });\r\n    }\r\n\r\n    getDurationById(id: String): Promise<GameMetadata> {\r\n        return new Promise<GameMetadata>((resolve, reject) => {\r\n            this.getDurations().then((durations) => {\r\n                durations.forEach((duration) => {\r\n                    if (duration._id == id) {\r\n                        resolve(duration);\r\n                    }\r\n                });\r\n            })\r\n        });\r\n    }\r\n\r\n    createDuration(name: string, min: number, max: number, description: string): Promise<GameMetadata> {\r\n        return this.http.post(API.metadata,\r\n            {\r\n                name: name,\r\n                min: min,\r\n                max: max,\r\n                type: 'duration',\r\n                description: description\r\n            })\r\n            .toPromise()\r\n            .then((response) => {\r\n                let duration = response.json() as GameMetadata;\r\n                this.durations.push(duration);\r\n                this.sortDurations();\r\n                return duration;\r\n            });\r\n    }\r\n\r\n    private _tagPromise: Promise<Tag[]>;\r\n    getTags(): Promise<Tag[]> {\r\n        if (!this._tagPromise) {\r\n            if (this.userService.can('tag_view')) {\r\n                this._tagPromise = this.http.get(API.tags)\r\n                    .toPromise()\r\n                    .then(response => {\r\n                        this.tags = response.json() as Tag[];\r\n                        return this.tags;\r\n                    })\r\n                    .catch(this.handleError);\r\n            } else {\r\n                this._tagPromise = new Promise<Tag[]>((resolve, reject) => {\r\n                    resolve([]);\r\n                });\r\n            }\r\n        }\r\n        return this._tagPromise;\r\n    }\r\n\r\n    getTagById(id: String): Promise<Tag> {\r\n        return new Promise<Tag>((resolve, reject) => {\r\n            this.getTags().then((tags) => {\r\n                tags.forEach((tag) => {\r\n                    if (tag._id == id) {\r\n                        resolve(tag);\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    gameHasTag(game: Game, tagIDs: String[]): boolean {\r\n        let foundTagGame: boolean = false;\r\n        (<Tag[]> game.tags).forEach((tag) => {\r\n            if (Util.indexOfId(tagIDs, tag) > -1) {\r\n                foundTagGame = true;\r\n                return false;\r\n            }\r\n        });\r\n        return foundTagGame;\r\n    }\r\n\r\n    deleteGame(game: Game): Promise<boolean> {\r\n        return this.http.delete(API.getGame(game._id))\r\n            .toPromise()\r\n            .then((response) => {\r\n                this._removeGameFromArray(game);\r\n                return true;\r\n            })\r\n    }\r\n\r\n    private _removeGameFromArray(game: Game): number {\r\n        let index = Util.indexOfId(this.games, game);\r\n\r\n        if (index > -1) {\r\n            this.games.splice(index, 1);\r\n        }\r\n        return index;\r\n    }\r\n\r\n    private _handleNewGame(game: Game, response: Response): Game {\r\n        let index = this._removeGameFromArray(game);\r\n        let newGame = response.json() as Game;\r\n        if (index > -1) {\r\n            this.games.splice(index, 0, newGame);\r\n        } else {\r\n            this.games.push(newGame);\r\n        }\r\n        this._sortGames();\r\n        return newGame;\r\n    }\r\n\r\n    saveGame(game: Game): Promise<Game> {\r\n        return this.http.put(API.getGame(game._id), game)\r\n            .toPromise()\r\n            .then((response) => {\r\n                return this._handleNewGame(game, response);\r\n            })\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    createGame(): Promise<Game> {\r\n        return this.http.post(API.games, {})\r\n            .toPromise()\r\n            .then((response) => {\r\n                let game = response.json() as Game;\r\n                this.games.push(game);\r\n                this._sortGames();\r\n                return game;\r\n            })\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    saveTagToGame(game: Game, tag: Tag): Promise<Game> {\r\n        return this.http.post(API.gameAddTag(game._id, tag._id), {})\r\n            .toPromise()\r\n            .then(response => {\r\n                return this._handleNewGame(game, response);\r\n            });\r\n    }\r\n\r\n    deleteTagFromGame(game: Game, tag: Tag): Promise<Game> {\r\n        return this.http.delete(API.gameRemoveTag(game._id, tag._id))\r\n            .toPromise()\r\n            .then(response => {\r\n                return this._handleNewGame(game, response);\r\n            })\r\n    }\r\n\r\n    createTag(name: string, game: Game): Promise<Game> {\r\n        return this.http.post(API.gameCreateTag(game._id, name), { name: name })\r\n            .toPromise()\r\n            .then(response => {\r\n                // reset the tags so we have to re-fetch the whole list\r\n                this._tagPromise = null;\r\n                return this._handleNewGame(game, response);\r\n            });\r\n    }\r\n\r\n    private handleError(error: any): Promise<any> {\r\n        // console.error('An error has occurred', error);\r\n        return Promise.reject(error.message || error);\r\n    }\r\n\r\n    // TODO: search stuff can be in a separate service\r\n\r\n    private _searchArray(arr: any[], type: string, idProperty: string, term: string): SearchResult[] {\r\n        let results: SearchResult[] = [];\r\n        arr.forEach((item) => {\r\n            let str = item.name;\r\n\r\n            if (str.toLowerCase().indexOf(term) > -1) {\r\n                var regex = new RegExp('(' + term + ')', 'gi');\r\n                str = str.replace(regex, '<strong>$1</strong>');\r\n\r\n                let result: SearchResult = {\r\n                    text: str,\r\n                    id: item[idProperty],\r\n                    type: type\r\n                }\r\n                results.push(result);\r\n            }\r\n        });\r\n        return results;\r\n    }\r\n    private _sortSearchResults(results: SearchResult[]): SearchResult[] {\r\n        results.sort((r1, r2) => {\r\n            let val1 = r1.text;\r\n            let val2 = r2.text;\r\n            if (val1 > val2) {\r\n                return 1;\r\n            }\r\n            if (val1 < val2) {\r\n                return -1;\r\n            }\r\n            return 0;\r\n        });\r\n        return results;\r\n    }\r\n\r\n    searchForResults(term: string): Promise<SearchResult[]> {\r\n        return new Promise<SearchResult[]>((resolve, reject) => {\r\n            term = term.toLowerCase();\r\n            let searchResults: SearchResult[] = [];\r\n            if (term) {\r\n                Promise.all([\r\n                    this.getNames(),\r\n                    this.getTags(),\r\n                    this.getDurations(),\r\n                    this.getPlayerCounts()\r\n                ])\r\n                    .then((items) => {\r\n                        searchResults = []\r\n                            .concat(this._searchArray(items[0], 'name', 'game', term))\r\n                            .concat(this._searchArray(items[1], 'tag', '_id', term))\r\n                            .concat(this._searchArray(items[2], 'duration', '_id', term))\r\n                            .concat(this._searchArray(items[3], 'playercount', '_id', term));\r\n\r\n                        // TODO: include player count and durations by actual values if the term is a number?\r\n\r\n                        searchResults = this._sortSearchResults(searchResults);\r\n\r\n                        resolve(searchResults);\r\n                    });\r\n            }\r\n        });\r\n    }\r\n\r\n    searchForTags(term: string): Promise<Tag[]> {\r\n        return new Promise<Tag[]>((resolve, reject) => {\r\n            term = term.toLocaleLowerCase();\r\n            let matchingTags: Tag[] = [];\r\n            if (term) {\r\n                this.getTags().then(tags => {\r\n                    tags.forEach(tag => {\r\n                        if (tag.name.toLocaleLowerCase().indexOf(term) > -1) {\r\n                            matchingTags.push(tag);\r\n                        }\r\n                    });\r\n                    resolve(matchingTags);\r\n                });\r\n            }\r\n        })\r\n    }\r\n\r\n    searchForGames(term: string): Promise<Game[]> {\r\n        return new Promise<Game[]>((resolve, reject) => {\r\n            term = term.toLowerCase();\r\n            let gameResults: Game[] = [];\r\n            if (term) {\r\n                Promise.all([\r\n                    this.getGames(),\r\n                    this.getTags(),\r\n                    this.getDurations(),\r\n                    this.getPlayerCounts()\r\n                ])\r\n                    .then((items) => {\r\n                        \r\n                        // search the tags\r\n                        let tagResults: String[] = [];\r\n                        items[1].forEach((tag) => {\r\n                            if (tag.name.toLowerCase().indexOf(term) > -1) {\r\n                                tagResults.push(tag._id);\r\n                            }\r\n                        });\r\n\r\n                        // search the durations\r\n                        let durationResults: String[] = [];\r\n                        items[2].forEach((duration) => {\r\n                            if (duration.name.toLowerCase().indexOf(term) > -1) {\r\n                                durationResults.push(duration._id);\r\n                            }\r\n                        });\r\n\r\n                        // search the player counts\r\n                        let playerCountResults: String[] = [];\r\n                        items[3].forEach((playercount) => {\r\n                            if (playercount.name.toLowerCase().indexOf(term) > -1) {\r\n                                playerCountResults.push(playercount._id);\r\n                            }\r\n                        });\r\n\r\n                        // loop through the games\r\n                        items[0].forEach((game) => {\r\n                            // add it if a tag matches or if the playercount or duration matches\r\n                            if (this.gameHasTag(game, tagResults) ||\r\n                                    durationResults.indexOf(game.duration._id) > -1 ||\r\n                                    playerCountResults.indexOf(game.playerCount._id) > -1 ) {\r\n                                gameResults.push(game);\r\n                            } else {\r\n                                // add it if a name matches\r\n                                game.names.forEach((name) => {\r\n                                    if (name.name.toLowerCase().indexOf(term) > -1 &&\r\n                                            Util.indexOfId(gameResults, game) == -1) {\r\n                                        gameResults.push(game);\r\n                                    }\r\n                                });\r\n                            }\r\n                        });\r\n\r\n                        resolve(gameResults);\r\n                    });\r\n            }\r\n        });\r\n    }\r\n}\r\n"]}