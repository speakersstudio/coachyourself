{"version":3,"sources":["../../app/src/app/service/game-note.service.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sCAA2C;AAG3C,uCAAqC;AAErC,gDAA8C;AAC9C,6CAAsC;AAQtC,2DAAyD;AACzD,iEAA8D;AAK9D;IAGI,yBACY,IAAa,EACb,WAAwB,EACxB,WAAgC;QAFhC,SAAI,GAAJ,IAAI,CAAS;QACb,gBAAW,GAAX,WAAW,CAAa;QACxB,gBAAW,GAAX,WAAW,CAAqB;QALpC,UAAK,GAAW,EAAE,CAAC;IAMnB,CAAC;IAET;;OAEG;IACH,yCAAyC;IACzC,gCAAgC;IAChC,gCAAgC;IAChC,0DAA0D;IAC1D,2DAA2D;IAC3D,+BAA+B;IAC/B,sCAAsC;IACtC,8DAA8D;IAC9D,yCAAyC;IACzC,qBAAqB;IACrB,4CAA4C;IAC5C,mBAAmB;IACnB,6EAA6E;IAC7E,+BAA+B;IAC/B,iBAAiB;IACjB,YAAY;IACZ,QAAQ;IACR,gCAAgC;IAChC,IAAI;IAEJ,yCAAe,GAAf,UAAgB,IAAU;QACtB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,eAAG,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aACxC,SAAS,EAAE;aACX,IAAI,CAAC,UAAA,QAAQ;YACV,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAY,CAAC;QACrC,CAAC,CAAC,CAAC;IACX,CAAC;IAED,oCAAU,GAAV,UAAW,OAAa;QACpB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;YACvC,MAAM,CAAC;QACX,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,eAAG,CAAC,KAAK,EAAE,OAAO,CAAC;aACpC,SAAS,EAAE;aACX,IAAI,CAAC,UAAA,QAAQ;YACV,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAU,CAAC;QACnC,CAAC,CAAC,CAAC;IACX,CAAC;IAED,oCAAU,GAAV,UAAW,IAAU;QACjB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YACrC,MAAM,CAAC;QACX,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,eAAG,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC;aAC5C,SAAS,EAAE;aACX,IAAI,CAAC,UAAA,QAAQ;YACV,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAU,CAAC;QACnC,CAAC,CAAC,CAAC;IACX,CAAC;IAED,oCAAU,GAAV,UAAW,IAAU;QACjB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;YACvC,MAAM,CAAC;QACX,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,eAAG,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aACzC,SAAS,EAAE;aACX,IAAI,CAAC,UAAA,QAAQ;YACV,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC,CAAC,CAAC;IACX,CAAC;IAEO,qCAAW,GAAnB,UAAoB,KAAU;QAC1B,iDAAiD;QACjD,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,CAAC;IAClD,CAAC;IA/EQ,eAAe;QAD3B,iBAAU,EAAE;yCAKS,kBAAO;YACA,0BAAW;YACX,2CAAmB;OANnC,eAAe,CAgF3B;IAAD,sBAAC;CAhFD,AAgFC,IAAA;AAhFY,0CAAe","file":"game-note.service.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Response } from '@angular/http';\r\n\r\nimport 'rxjs/add/operator/toPromise';\r\n\r\nimport { AppHttp } from '../../data/app-http';\r\nimport { API } from '../../constants';\r\n\r\nimport { Game } from '../../model/game';\r\nimport { GameMetadata } from '../../model/game-metadata';\r\nimport { Tag } from '../../model/tag';\r\nimport { Note } from '../../model/note';\r\nimport { Team } from '../../model/team';\r\n\r\nimport { UserService } from '../../service/user.service';\r\nimport { GameDatabaseService } from './game-database.service';\r\n\r\nimport { Util } from '../../util/util';\r\n\r\n@Injectable()\r\nexport class GameNoteService {\r\n    private notes: Note[] = [];\r\n\r\n    constructor(\r\n        private http: AppHttp,\r\n        private userService: UserService,\r\n        private gameService: GameDatabaseService\r\n        ) { }\r\n\r\n    /**\r\n     * This probably shouldn't be used. \r\n     */\r\n    // private _notePromise: Promise<Note[]>;\r\n    // getNotes(): Promise<Note[]> {\r\n    //     if (!this._notePromise) {\r\n    //         if (this.userService.can('note_public_view')) {\r\n    //             this._notePromise = this.http.get(API.notes)\r\n    //                 .toPromise()\r\n    //                 .then(response => {\r\n    //                     this.notes = response.json() as Note[];\r\n    //                     return this.notes;\r\n    //                 })\r\n    //                 .catch(this.handleError);\r\n    //         } else {\r\n    //             this._notePromise = new Promise<Note[]>((resolve, reject) => {\r\n    //                 resolve([]);\r\n    //             })\r\n    //         }\r\n    //     }\r\n    //     return this._notePromise;\r\n    // }\r\n\r\n    getNotesForGame(game: Game): Promise<Note[]> {\r\n        return this.http.get(API.gameNotes(game._id))\r\n            .toPromise()\r\n            .then(response => {\r\n                return response.json() as Note[];\r\n            });\r\n    }\r\n\r\n    createNote(newNote: Note): Promise<Note> {\r\n        if (!this.userService.can('note_create')) {\r\n            return;\r\n        }\r\n\r\n        return this.http.post(API.notes, newNote)\r\n            .toPromise()\r\n            .then(response => {\r\n                return response.json() as Note;\r\n            });\r\n    }\r\n\r\n    updateNote(note: Note): Promise<Note> {\r\n        if (!this.userService.can('note_edit')) {\r\n            return;\r\n        }\r\n\r\n        return this.http.put(API.getNote(note._id), note)\r\n            .toPromise()\r\n            .then(response => {\r\n                return response.json() as Note;\r\n            });\r\n    }\r\n\r\n    deleteNote(note: Note): Promise<boolean> {\r\n        if (!this.userService.can('note_delete')) {\r\n            return;\r\n        }\r\n\r\n        return this.http.delete(API.getNote(note._id))\r\n            .toPromise()\r\n            .then(response => {\r\n                return true;\r\n            });\r\n    }\r\n\r\n    private handleError(error: any): Promise<any> {\r\n        // console.error('An error has occurred', error);\r\n        return Promise.reject(error.message || error);\r\n    }\r\n}"]}