{"version":3,"sources":["../../app/src/app/service/auth-guard.service.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sCAA2C;AAC3C,0CAAoI;AAGpI,yDAAuD;AACvD,2DAAyD;AAGzD;IAEI,mBACY,MAAc,EACd,QAAoB,EACpB,WAAwB;QAFxB,WAAM,GAAN,MAAM,CAAQ;QACd,aAAQ,GAAR,QAAQ,CAAY;QACpB,gBAAW,GAAX,WAAW,CAAa;IACjC,CAAC;IAEJ,oCAAgB,GAAhB,UAAkB,KAA6B,EAAE,KAA0B;QACvE,kDAAkD;QADtD,iBAwBC;QArBG,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC;YAC/B,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,UAAA,IAAI;gBAC1C,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,KAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC;YAChE,CAAC,CAAC,CAAC;QACP,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC;YACrC,IAAI,IAAI,GAAO,KAAK,CAAC,IAAI,CAAC;YAC1B,uDAAuD;YACvD,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;gBAChD,MAAM,CAAC,IAAI,CAAC;YAChB,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBAC3D,MAAM,CAAC,IAAI,CAAC;YAChB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,mBAAmB,CAAC,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;YACtE,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACrC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QAC3D,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IAhCQ,SAAS;QADrB,iBAAU,EAAE;yCAIW,eAAM;YACJ,wBAAU;YACP,0BAAW;OAL3B,SAAS,CAmCrB;IAAD,gBAAC;CAnCD,AAmCC,IAAA;AAnCY,8BAAS","file":"auth-guard.service.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { CanActivateChild, Router, ActivatedRoute, ActivatedRouteSnapshot, RouterStateSnapshot, UrlSegment } from '@angular/router';\r\n\r\nimport { User } from \"../../model/user\";\r\nimport { AppService } from '../../service/app.service';\r\nimport { UserService } from '../../service/user.service';\r\n\r\n@Injectable() \r\nexport class AuthGuard implements CanActivateChild {\r\n\r\n    constructor(\r\n        private router: Router,\r\n        private _service: AppService,\r\n        private userService: UserService\r\n    ) {}\r\n\r\n    canActivateChild (route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Promise<boolean>|boolean {\r\n        //console.log(this.userService.getLoggedInUser());\r\n\r\n        if (this.userService.isLoggingIn) {\r\n            return this.userService.loginPromise.then(user => {\r\n                return Promise.resolve(this.canActivateChild(route, state));\r\n            });\r\n        }\r\n\r\n        if (this.userService.getLoggedInUser()) {\r\n            let data:any = route.data;\r\n            //console.log(data, this.userService.can(data.action));\r\n            if (data.admin && this.userService.isSuperAdmin()) {\r\n                return true;\r\n            } else if (!data.action || this.userService.can(data.action)) {\r\n                return true;\r\n            } else {\r\n                this.router.navigate(['/app/unauthorized'], { replaceUrl: true });\r\n            }\r\n        } else {\r\n            this._service.setRedirect(route.url);\r\n            this.router.navigate(['/login'], { replaceUrl: true });\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n}"]}