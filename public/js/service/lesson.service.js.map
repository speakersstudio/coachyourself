{"version":3,"sources":["../../app/src/service/lesson.service.ts"],"names":[],"mappings":"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","file":"lesson.service.js","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\nimport 'rxjs/add/operator/toPromise';\r\n\r\nimport { RequestOptions, Headers } from '@angular/http';\r\nimport { AppHttp } from '../data/app-http';\r\nimport { API } from '../constants';\r\n\r\nimport { Lesson, LessonVersion } from '../model/lesson';\r\nimport { UserService } from '../service/user.service';\r\n\r\n@Injectable()\r\nexport class LessonService {\r\n\r\n    constructor(\r\n        private http: AppHttp,\r\n        private userService: UserService\r\n        ) { }\r\n\r\n    getLessons(): Promise<Lesson[]> {\r\n        return this.http.get(API.lessons)\r\n            .toPromise()\r\n            .then(response => {\r\n                return response.json() as Lesson[];\r\n            });\r\n    }\r\n\r\n    getAllLessons(): Promise<Lesson[]> {\r\n        return this.http.get(API.getLesson('all'))\r\n            .toPromise()\r\n            .then(response => {\r\n                return response.json() as Lesson[];\r\n            });\r\n    }\r\n\r\n    getDashboardLessons(): Promise<Lesson[]> {\r\n        return this.http.get(API.getDashboardLessons)\r\n            .toPromise()\r\n            .then(response => {\r\n                return response.json() as Lesson[];\r\n            });\r\n    }\r\n\r\n    downloadLesson(id: string): Promise<string> {\r\n        return this.http.get(API.getLesson(id))\r\n            .toPromise()\r\n            .then(response => {\r\n                return response.json().url as string;\r\n            });\r\n    }\r\n    \r\n    getLatestVersionForLesson(lesson: Lesson): LessonVersion {\r\n        lesson.versions.sort((a, b) => {\r\n            return b.ver - a.ver;\r\n        });\r\n        return lesson.versions[0];\r\n    }\r\n\r\n    createLesson(): Promise<Lesson> {\r\n        if (this.userService.can('material_create')) {\r\n            return this.http.post(API.lessons, {})\r\n                .toPromise()\r\n                .then(response => {\r\n                    return response.json() as Lesson;\r\n                });\r\n        }\r\n    }\r\n\r\n    saveLesson(lesson: Lesson): Promise<Lesson> {\r\n        if (!this.userService.isSuperAdmin()) {\r\n            return;\r\n        }\r\n        return this.http.put(API.getLesson(lesson._id), lesson)\r\n            .toPromise()\r\n            .then(response => {\r\n                return response.json() as Lesson;\r\n            });\r\n    }\r\n\r\n    deleteLesson(lesson: Lesson): Promise<boolean> {\r\n        if (this.userService.can('lesson_delete')) {\r\n            return this.http.delete(API.getLesson(lesson._id))\r\n                .toPromise()\r\n                .then(response => {\r\n                    return true;\r\n                })\r\n        }\r\n    }\r\n\r\n    postNewVersion(materialItemId: string, version: LessonVersion, file: File): Promise<Lesson> {\r\n        if (!this.userService.isSuperAdmin()) {\r\n            return;\r\n        }\r\n\r\n        let formData = new FormData();\r\n        formData.append('ver', version.ver + '');\r\n        formData.append('description', version.description);\r\n        formData.append('file', file, file.name);\r\n\r\n        return this.http.postFormData(API.lessonVersion(materialItemId), formData).toPromise()\r\n            .then(response => {\r\n                return response.json() as Lesson;\r\n            });\r\n    }\r\n\r\n    deleteVersion(id: string, version: LessonVersion): Promise<Lesson> {\r\n        if (!this.userService.isSuperAdmin()) {\r\n            return;\r\n        }\r\n\r\n        return this.http.delete(API.getLessonVersion(id, version._id)).toPromise()\r\n            .then(response => {\r\n                return response.json() as Lesson;\r\n            });\r\n    }\r\n}"]}