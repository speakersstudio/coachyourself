{"version":3,"sources":["../../app/src/service/app.service.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sCAA2C;AAK3C,uCAAqC;AAErC,0CAAiC;AAEjC,6CAA2C;AAM3C;IAII,oBACY,IAAa;QAAb,SAAI,GAAJ,IAAI,CAAS;IACrB,CAAC;IAEG,gCAAW,GAAnB,UAAoB,KAAU;QAC1B,OAAO,CAAC,KAAK,CAAC,uBAAuB,EAAE,KAAK,CAAC,CAAC;QAC9C,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,CAAC;IAClD,CAAC;IAED,gCAAW,GAAX,UAAa,GAAiB;QAC1B,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC;IACxB,CAAC;IAED,gCAAW,GAAX;QACI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;IACzB,CAAC;IAED,iCAAY,GAAZ,UAAc,IAAU;QACpB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,eAAG,CAAC,YAAY,EAAE,IAAI,CAAC;aACxC,SAAS,EAAE;aACX,IAAI,CAAC,UAAC,QAAQ;YACX,IAAI,IAAI,GAAG,QAAQ,CAAC,IAAI,EAAE,CAAC;YAC3B,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI,OAAO,CAAC,CAAC,CAAC;gBAC3B,MAAM,CAAC,mDAAmD,CAAC;YAC/D,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,MAAM,CAAC,EAAE,CAAC;YACd,CAAC;QACL,CAAC,CAAC,CAAA;IACV,CAAC;IAED,2BAAM,GAAN,UAAQ,IAAU,EAAE,KAAa;QAC7B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,eAAG,CAAC,MAAM,EAAE;YAC9B,WAAW,EAAE,KAAK;YAClB,IAAI,EAAE,IAAI;SACb,CAAC,CAAC,SAAS,EAAE;aACT,IAAI,CAAC,UAAA,MAAM;YACR,MAAM,CAAC,MAAM,CAAC,IAAI,EAAU,CAAC;QACjC,CAAC,CAAC,CAAC;IACX,CAAC;IAMD,gCAAW,GAAX;QACI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;YACxB,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,eAAG,CAAC,OAAO,CAAC;iBAC5C,SAAS,EAAE;iBACX,IAAI,CAAC,UAAA,QAAQ;gBACV,IAAI,QAAQ,GAAG,QAAQ,CAAC,IAAI,EAAe,CAAC;gBAC5C,MAAM,CAAC,QAAQ,CAAC;YACpB,CAAC,CAAC;iBACD,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACjC,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC;IAChC,CAAC;IA3DQ,UAAU;QADtB,iBAAU,EAAE;yCAMS,kBAAO;OALhB,UAAU,CA6DtB;IAAD,iBAAC;CA7DD,AA6DC,IAAA;AA7DY,gCAAU","file":"app.service.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Headers } from '@angular/http';\r\nimport { UrlSegment } from '@angular/router';\r\n\r\nimport { Observable, Subject } from 'rxjs/Rx';\r\nimport 'rxjs/add/operator/toPromise';\r\n\r\nimport {API} from '../constants';\r\n\r\nimport { AppHttp } from '../data/app-http';\r\n\r\nimport { User } from '../model/user';\r\nimport { Package } from '../model/package';\r\n\r\n@Injectable()\r\nexport class AppService {\r\n\r\n    private redirect: UrlSegment[];\r\n    \r\n    constructor(\r\n        private http: AppHttp\r\n    ) { }\r\n\r\n    private handleError(error: any): Promise<any> {\r\n        console.error('An error has occurred', error);\r\n        return Promise.reject(error.message || error);\r\n    }\r\n\r\n    setRedirect (url: UrlSegment[]): void {\r\n        this.redirect = url;\r\n    }\r\n\r\n    getRedirect (): UrlSegment[] {\r\n        return this.redirect;\r\n    }\r\n\r\n    validateUser (user: User): Promise<string> {\r\n        return this.http.post(API.validateUser, user)\r\n            .toPromise()\r\n            .then((response) => {\r\n                let data = response.json();\r\n                if (data.conflict == 'email') {\r\n                    return 'That email address is already registered with us.';\r\n                } else {\r\n                    return '';\r\n                }\r\n            })\r\n    }\r\n\r\n    signup (user: User, token: string): Promise<User> {\r\n        return this.http.post(API.signup, {\r\n            stripeToken: token,\r\n            user: user\r\n        }).toPromise()\r\n            .then(result => {\r\n                return result.json() as User;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Get all of the available packages!\r\n     */\r\n    private _packagePromise: Promise<Package[]>;\r\n    getPackages(): Promise<Package[]> {\r\n        if (!this._packagePromise) {\r\n            this._packagePromise = this.http.get(API.package)\r\n                .toPromise()\r\n                .then(response => {\r\n                    let packages = response.json() as Package[];\r\n                    return packages;\r\n                })\r\n                .catch(this.handleError);\r\n        }\r\n        return this._packagePromise;\r\n    }\r\n\r\n}"]}